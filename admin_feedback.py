#!/usr/bin/env python3
"""
Admin Commands for Feedback Management
Provides admin interface for monitoring feedback and AI training
"""

import asyncio
from datetime import datetime
from telethon import events, Button
from config import bot_client, ADMIN_ID, logger
from feedback_manager import feedback_manager
from ai_trainer import ai_trainer
from fine_tuning_simple import fine_tuning_manager

@bot_client.on(events.NewMessage(pattern='/feedback_stats'))
async def cmd_feedback_stats(event):
    """Show feedback statistics (admin only)"""
    if event.sender_id != ADMIN_ID:
        await event.reply("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    try:
        # Initialize feedback database
        await feedback_manager.init_db()
        
        # Get training stats
        stats = await ai_trainer.get_training_stats()
        
        # Get feedback stats
        feedback_stats = await feedback_manager.get_feedback_stats()
        
        # Format statistics message
        total_feedback = stats.get('total_feedback', 0)
        useful_rate = stats.get('useful_leads_rate', 0)
        recent_feedback = stats.get('recent_feedback_7d', 0)
        training_examples = stats.get('training_examples', 0)
        ai_improvement = stats.get('ai_improvement_enabled', False)
        
        # –ê–¥–º–∏–Ω—Å–∫–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        admin_decisions = stats.get('admin_decisions', 0)
        admin_approved = stats.get('admin_approved', 0)
        admin_rejected = stats.get('admin_rejected', 0)
        
        message = f"""üìä **–°–¢–ê–¢–ò–°–¢–ò–ö–ê –û–ë–†–ê–¢–ù–û–ô –°–í–Ø–ó–ò**

üî¢ **–û–±—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:**
‚Ä¢ –í—Å–µ–≥–æ –æ—Ç–∑—ã–≤–æ–≤: {total_feedback}
‚Ä¢ –ü–æ–ª–µ–∑–Ω—ã—Ö –ª–∏–¥–æ–≤: {feedback_stats.get('useful_count', 0)}
‚Ä¢ –ù–µ–ø–æ–ª–µ–∑–Ω—ã—Ö –ª–∏–¥–æ–≤: {feedback_stats.get('not_useful_count', 0)}
‚Ä¢ –ö–∞—á–µ—Å—Ç–≤–æ –ª–∏–¥–æ–≤: {useful_rate}%

üë®‚Äçüíº **–†–µ—à–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:**
‚Ä¢ –í—Å–µ–≥–æ —Ä–µ—à–µ–Ω–∏–π: {admin_decisions}
‚Ä¢ –û–¥–æ–±—Ä–µ–Ω–æ: {admin_approved}
‚Ä¢ –û—Ç–∫–ª–æ–Ω–µ–Ω–æ: {admin_rejected}

üìà **–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:**
‚Ä¢ –û—Ç–∑—ã–≤–æ–≤ –∑–∞ 7 –¥–Ω–µ–π: {recent_feedback}
‚Ä¢ –ü—Ä–∏–º–µ—Ä–æ–≤ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è: {training_examples}

ü§ñ **–£–ª—É—á—à–µ–Ω–∏–µ –ò–ò:**
‚Ä¢ –°—Ç–∞—Ç—É—Å: {'‚úÖ –ê–∫—Ç–∏–≤–Ω–æ' if ai_improvement else '‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö'}
‚Ä¢ –ü—Ä–∏–º–µ—Ä–æ–≤ –≤ –ø—Ä–æ–º–ø—Ç–∞—Ö: {training_examples}

üí° **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**
"""
        
        if total_feedback < 50:
            message += "‚Ä¢ –ù—É–∂–Ω–æ –±–æ–ª—å—à–µ –æ—Ç–∑—ã–≤–æ–≤ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ò–ò\n"
        elif useful_rate < 70:
            message += "‚Ä¢ –ö–∞—á–µ—Å—Ç–≤–æ –ª–∏–¥–æ–≤ –Ω–∏–∑–∫–æ–µ - –Ω—É–∂–Ω–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ò–ò\n"
        elif useful_rate > 85:
            message += "‚Ä¢ –û—Ç–ª–∏—á–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –ª–∏–¥–æ–≤! ‚úÖ\n"
        if admin_decisions >= 10:
            message += "‚Ä¢ –í–∞—à–∏ –∞–¥–º–∏–Ω—Å–∫–∏–µ —Ä–µ—à–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –ò–ò! üéØ\n"
        
        buttons = [
            [Button.inline("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", "admin_feedback_refresh"),
             Button.inline("üì§ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö", "admin_feedback_export")],
            [Button.inline("üìö –ú–∏–≥—Ä–∏—Ä–æ–≤–∞—Ç—å feedback.log", "admin_migrate_feedback"),
             Button.inline("üß† –ü—Ä–æ–≤–µ—Ä–∏—Ç—å fine-tuning", "admin_check_finetuning")],
            [Button.inline("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å fine-tuning", "admin_start_finetuning"),
             Button.inline("‚ùå –ó–∞–∫—Ä—ã—Ç—å", "admin_close")]
        ]
        
        await event.reply(message, buttons=buttons, parse_mode='markdown')
        
    except Exception as e:
        logger.error(f"Error showing feedback stats: {e}")
        await event.reply(f"‚ùå –û—à–∏–±–∫–∞: {e}")

@bot_client.on(events.CallbackQuery(pattern=b'admin_feedback_refresh'))
async def callback_feedback_refresh(event):
    """Refresh feedback statistics"""
    if event.sender_id != ADMIN_ID:
        return
    
    # Trigger the stats command
    await cmd_feedback_stats(event)

@bot_client.on(events.CallbackQuery(pattern=b'admin_feedback_export'))
async def callback_feedback_export(event):
    """Export training data"""
    if event.sender_id != ADMIN_ID:
        return
    
    try:
        count = await ai_trainer.export_training_data()
        await event.answer(f"‚úÖ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {count} –ø—Ä–∏–º–µ—Ä–æ–≤ –≤ ai_training_data.jsonl", alert=True)
    except Exception as e:
        logger.error(f"Error exporting training data: {e}")
        await event.answer(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}", alert=True)

@bot_client.on(events.CallbackQuery(pattern=b'admin_migrate_feedback'))
async def callback_migrate_feedback(event):
    """–ú–∏–≥—Ä–∏—Ä—É–µ—Ç feedback.log –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    if event.sender_id != ADMIN_ID:
        return
    
    try:
        await event.answer("üîÑ –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–∏ feedback.log...", alert=True)
        
        from review_handler import migrate_feedback_log_to_db
        migrated_count = await migrate_feedback_log_to_db()
        
        if migrated_count > 0:
            await bot_client.send_message(
                ADMIN_ID, 
                f"‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\nüìö –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ {migrated_count} –∞–¥–º–∏–Ω—Å–∫–∏—Ö —Ä–µ—à–µ–Ω–∏–π –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –ò–ò."
            )
        else:
            await bot_client.send_message(
                ADMIN_ID,
                "‚ÑπÔ∏è –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
            )
        
    except Exception as e:
        logger.error(f"Error migrating feedback: {e}")
        await event.answer(f"‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}", alert=True)

@bot_client.on(events.CallbackQuery(pattern=b'admin_check_finetuning'))
async def callback_check_finetuning(event):
    """Check fine-tuning readiness"""
    if event.sender_id != ADMIN_ID:
        return
    
    try:
        readiness = await fine_tuning_manager.can_start_fine_tuning()
        
        if readiness['ready']:
            message = f"""‚úÖ –ì–û–¢–û–í–û –ö FINE-TUNING!

üìä –î–∞–Ω–Ω—ã–µ:
‚Ä¢ –í—Å–µ–≥–æ –ø—Ä–∏–º–µ—Ä–æ–≤: {readiness['total_examples']}
‚Ä¢ –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö: {readiness['positive_examples']}
‚Ä¢ –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö: {readiness['negative_examples']}

üí° {readiness['recommendation']}"""
        else:
            message = f"""‚ö†Ô∏è –ù–ï –ì–û–¢–û–í–û –ö FINE-TUNING

üìä –¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ:
‚Ä¢ –í—Å–µ–≥–æ –ø—Ä–∏–º–µ—Ä–æ–≤: {readiness.get('total_examples', 0)}
‚Ä¢ –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö: {readiness.get('positive_examples', 0)}
‚Ä¢ –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö: {readiness.get('negative_examples', 0)}
‚Ä¢ –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º: {readiness.get('min_required', 100)}

üí° {readiness.get('recommendation', '–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Å–æ–±–∏—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ')}"""
        
        await event.answer(message, alert=True)
        
    except Exception as e:
        logger.error(f"Error checking fine-tuning readiness: {e}")
        await event.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}", alert=True)

@bot_client.on(events.CallbackQuery(pattern=b'admin_start_finetuning'))
async def callback_start_finetuning(event):
    """Start fine-tuning process"""
    if event.sender_id != ADMIN_ID:
        return
    
    try:
        await event.answer("üöÄ –ó–∞–ø—É—Å–∫ fine-tuning... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –≤—Ä–µ–º—è.", alert=True)
        
        result = await fine_tuning_manager.full_fine_tuning_process()
        
        if result['success']:
            message = f"""‚úÖ FINE-TUNING –ó–ê–ü–£–©–ï–ù!

Job ID: {result['job_id']}
–ü—Ä–∏–º–µ—Ä–æ–≤: {result['examples_count']}

–ü—Ä–æ—Ü–µ—Å—Å –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 10-60 –º–∏–Ω—É—Ç.
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /check_finetuning {result['job_id']} –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞."""
        else:
            message = f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ fine-tuning:\n{result['message']}"
        
        await bot_client.send_message(ADMIN_ID, message)
        
    except Exception as e:
        logger.error(f"Error starting fine-tuning: {e}")
        await event.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}", alert=True)

@bot_client.on(events.CallbackQuery(pattern=b'admin_close'))
async def callback_admin_close(event):
    """Close admin menu"""
    if event.sender_id != ADMIN_ID:
        return
    
    await event.delete()

@bot_client.on(events.NewMessage(pattern='/ai_quality'))
async def cmd_ai_quality(event):
    """Show AI quality metrics (admin only)"""
    if event.sender_id != ADMIN_ID:
        await event.reply("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    try:
        # Get recent feedback for quality analysis
        recent_feedback = await feedback_manager.get_recent_feedback(50)
        
        if not recent_feedback:
            await event.reply("üìä –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –ò–ò")
            return
        
        # Analyze feedback by confidence levels
        high_conf_useful = 0
        high_conf_not_useful = 0
        low_conf_useful = 0
        low_conf_not_useful = 0
        
        for item in recent_feedback:
            confidence = item.get('confidence', 0.5)
            feedback = item['user_feedback']
            
            if confidence >= 0.8:
                if feedback == 'useful':
                    high_conf_useful += 1
                else:
                    high_conf_not_useful += 1
            else:
                if feedback == 'useful':
                    low_conf_useful += 1
                else:
                    low_conf_not_useful += 1
        
        total_high = high_conf_useful + high_conf_not_useful
        total_low = low_conf_useful + low_conf_not_useful
        
        high_accuracy = (high_conf_useful / max(1, total_high)) * 100
        low_accuracy = (low_conf_useful / max(1, total_low)) * 100
        
        message = f"""üéØ **–ö–ê–ß–ï–°–¢–í–û –ö–õ–ê–°–°–ò–§–ò–ö–ê–¶–ò–ò –ò–ò**

üìà **–í—ã—Å–æ–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å (‚â•80%):**
‚Ä¢ –í—Å–µ–≥–æ: {total_high}
‚Ä¢ –¢–æ—á–Ω–æ—Å—Ç—å: {high_accuracy:.1f}%
‚Ä¢ –ü–æ–ª–µ–∑–Ω—ã—Ö: {high_conf_useful}
‚Ä¢ –ù–µ–ø–æ–ª–µ–∑–Ω—ã—Ö: {high_conf_not_useful}

üìâ **–ù–∏–∑–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å (<80%):**
‚Ä¢ –í—Å–µ–≥–æ: {total_low}
‚Ä¢ –¢–æ—á–Ω–æ—Å—Ç—å: {low_accuracy:.1f}%
‚Ä¢ –ü–æ–ª–µ–∑–Ω—ã—Ö: {low_conf_useful}
‚Ä¢ –ù–µ–ø–æ–ª–µ–∑–Ω—ã—Ö: {low_conf_not_useful}

üí° **–ê–Ω–∞–ª–∏–∑:**
"""
        
        if high_accuracy > 85:
            message += "‚úÖ –ò–ò —Ö–æ—Ä–æ—à–æ –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç —É–≤–µ—Ä–µ–Ω–Ω—ã–µ —Å–ª—É—á–∞–∏\n"
        else:
            message += "‚ö†Ô∏è –ò–ò –æ—à–∏–±–∞–µ—Ç—Å—è –¥–∞–∂–µ –≤ —É–≤–µ—Ä–µ–Ω–Ω—ã—Ö —Å–ª—É—á–∞—è—Ö\n"
            
        if low_accuracy < 50:
            message += "‚úÖ –ò–ò –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Å–æ–º–Ω–µ–≤–∞–µ—Ç—Å—è –≤ —Å–ª–æ–∂–Ω—ã—Ö —Å–ª—É—á–∞—è—Ö\n"
        else:
            message += "‚ö†Ô∏è –ò–ò —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ —Å–æ–º–Ω–µ–≤–∞–µ—Ç—Å—è –≤ —Ö–æ—Ä–æ—à–∏—Ö –ª–∏–¥–∞—Ö\n"
        
        await event.reply(message, parse_mode='markdown')
        
    except Exception as e:
        logger.error(f"Error showing AI quality: {e}")
        await event.reply(f"‚ùå –û—à–∏–±–∫–∞: {e}")

@bot_client.on(events.NewMessage(pattern=r'/check_finetuning\s+(\S+)'))
async def cmd_check_finetuning_status(event):
    """Check fine-tuning job status (admin only)"""
    if event.sender_id != ADMIN_ID:
        await event.reply("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    try:
        job_id = event.pattern_match.group(1)
        status = fine_tuning_manager.check_fine_tuning_status(job_id)
        
        if 'error' in status:
            await event.reply(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: {status['error']}")
            return
        
        status_emoji = {
            'validating_files': 'üîç',
            'queued': '‚è≥',
            'running': 'üèÉ',
            'succeeded': '‚úÖ',
            'failed': '‚ùå',
            'cancelled': '‚õî'
        }.get(status['status'], 'üîÑ')
        
        message = f"""üß† **FINE-TUNING STATUS**

{status_emoji} **–°—Ç–∞—Ç—É—Å**: {status['status']}
üÜî **Job ID**: {status['id']}
üìÖ **–°–æ–∑–¥–∞–Ω**: {datetime.fromtimestamp(status['created_at']).strftime('%Y-%m-%d %H:%M')}"""
        
        if status['finished_at']:
            message += f"\n‚úÖ **–ó–∞–≤–µ—Ä—à–µ–Ω**: {datetime.fromtimestamp(status['finished_at']).strftime('%Y-%m-%d %H:%M')}"
        
        if status['model']:
            message += f"\nü§ñ **–ú–æ–¥–µ–ª—å**: `{status['model']}`"
            message += f"\n\n‚ÑπÔ∏è –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–æ–≤–æ–π –º–æ–¥–µ–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –≤ .env:\n`FINE_TUNED_MODEL={status['model']}`"
        
        await event.reply(message, parse_mode='markdown')
        
    except Exception as e:
        logger.error(f"Error checking fine-tuning status: {e}")
        await event.reply(f"‚ùå –û—à–∏–±–∫–∞: {e}")

@bot_client.on(events.NewMessage(pattern='/list_models'))
async def cmd_list_finetuned_models(event):
    """List fine-tuned models (admin only)"""
    if event.sender_id != ADMIN_ID:
        await event.reply("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    try:
        models = fine_tuning_manager.list_fine_tuned_models()
        
        if not models:
            await event.reply("ü§ñ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö fine-tuned –º–æ–¥–µ–ª–µ–π")
            return
        
        message = "ü§ñ **FINE-TUNED –ú–û–î–ï–õ–ò**\n\n"
        
        for model in models:
            created_date = datetime.fromtimestamp(model['created']).strftime('%Y-%m-%d')
            message += f"‚Ä¢ `{model['id']}`\n  üìÖ {created_date} | üè¢ {model['owned_by']}\n\n"
        
        message += "‚ÑπÔ∏è –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –≤ .env:\n`FINE_TUNED_MODEL=ft:gpt-4o-mini:...`"
        
        await event.reply(message, parse_mode='markdown')
        
    except Exception as e:
        logger.error(f"Error listing models: {e}")
        await event.reply(f"‚ùå –û—à–∏–±–∫–∞: {e}")

logger.info("‚úÖ Admin feedback commands with fine-tuning loaded")