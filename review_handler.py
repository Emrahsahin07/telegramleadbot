# review_handler.py
import asyncio
import json
import os
import re
from datetime import datetime
from telethon import Button
from telethon import events
import hashlib
from config import bot_client, ADMIN_ID, logger, metrics
from delivery import send_lead_to_users
from feedback_manager import feedback_manager

REVIEW_FILE = "ai_review.log"
FEEDBACK_FILE = "feedback.log"

# –•—Ä–∞–Ω–∏–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –ª–∏–¥–∞—Ö (–≤ production ‚Äî –≤ –ë–î)
pending_leads = {}

async def load_pending_reviews():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ ai_review.log"""
    reviews = []
    if not os.path.exists(REVIEW_FILE):
        return reviews
    with open(REVIEW_FILE, "r", encoding="utf-8") as f:
        for line in f:
            if line.strip():
                try:
                    parts = line.split(" | ")
                    ts = parts[0]
                    chat_info = parts[1]
                    text = parts[2]
                    details = " | ".join(parts[3:])
                    reviews.append({
                        "timestamp": ts,
                        "chat_info": chat_info,
                        "text": text,
                        "details": details
                    })
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç—Ä–æ–∫–∏: {line} | {e}")
    return reviews

async def send_review_to_admin(review):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –∞–¥–º–∏–Ω—É"""
    # Extract fields from review dictionary
    region = review.get("region")
    category = review.get("category") or review.get("detected_category")
    subcategory = review.get("subcategory")
    route = review.get("route")  # tuple/list like (pickup, dest)
    confidence = review.get("confidence", 0.0)
    explanation = review.get("explanation", "")

    # Parse 'details' string if direct fields are not present
    if not category or not region or not explanation:
        details = review.get("details", "")
        if details:
            # Try to extract data from details string if direct fields are missing
            if not category and "category:" in details:
                category_match = re.search(r"category:([^,]+)", details)
                if category_match:
                    category = category_match.group(1).strip()
            if not region and "region:" in details:
                region_match = re.search(r"region:([^,]+)", details)
                if region_match:
                    region = region_match.group(1).strip()
            if not explanation and "explanation:" in details:
                explanation_match = re.search(r"explanation:([^,]+)", details)
                if explanation_match:
                    explanation = explanation_match.group(1).strip()

    # Build tags
    tags = []
    if route and any(route):
        a, b = (route + [None, None])[:2] if isinstance(route, list) else route
        if a and b:
            tags.append(f"#{str(a).lower()} ‚Üí #{str(b).lower()}")
        elif a:
            tags.append(f"#{str(a).lower()}")
        elif b:
            tags.append(f"#{str(b).lower()}")
    elif region:
        tags.append(f"#{str(region).lower()}")
    if category:
        tags.append(f"#{str(category).lower()}")
    if subcategory:
        tags.append(f"#{str(subcategory).lower()}")

    tags_str = (" " + " ".join(tags)) if tags else ""

    # Format confidence as percentage
    confidence_str = f" ({confidence*100:.0f}%)" if confidence else ""
    
    # Add explanation if available
    explanation_str = f"\n\nüí° {explanation}" if explanation else ""

    msg = (
        f"‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä—å –ª–∏–¥{confidence_str}:{tags_str}\n"
        f"{review['text']}{explanation_str}"
    )
    # –°—Ç–∞–±–∏–ª—å–Ω—ã–π ID –ª–∏–¥–∞ –ø–æ (timestamp|chat_info|text)
    raw_key = f"{review.get('timestamp','')}|{review.get('chat_info','')}|{review.get('text','')}"
    lead_id = hashlib.sha1(raw_key.encode("utf-8")).hexdigest()[:16]  # 16-—Å–∏–º–≤–æ–ª—å–Ω—ã–π hex
    pending_leads[lead_id] = review  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ (–∫–ª—é—á —Å—Ç—Ä–æ–∫–æ–≤—ã–π)

    # –ö–Ω–æ–ø–∫–∏: –∫–æ—Ä–æ—Ç–∫–∏–π payload <= 64 –±–∞–π—Ç: ap:<id> / rj:<id>
    link = review.get("link")
    row = [
        Button.inline("‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", data=f"ap:{lead_id}".encode()),
        Button.inline("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", data=f"rj:{lead_id}".encode()),
    ]
    # Add URL button only if link looks safe/valid
    try:
        import re as _re
        if isinstance(link, str) and (
            _re.match(r"^https://t\.me/(c/\d+/\d+|[A-Za-z0-9_]+)/?\d*$", link)
            or _re.match(r"^tg://", link)
        ):
            row.append(Button.url("üîó –°–æ–æ–±—â–µ–Ω–∏–µ", link))
    except Exception:
        pass
    buttons = [row]
    # Ensure correct bot identity before sending admin review
    try:
        desired_bot_id_str = os.getenv("TARGET_BOT_ID") or os.getenv("BOT_ID")
        desired_bot_id = int(desired_bot_id_str) if desired_bot_id_str else None
    except Exception:
        desired_bot_id = None
    try:
        me = await bot_client.get_me()
        current_bot_id = getattr(me, 'id', None)
    except Exception:
        current_bot_id = None
    if desired_bot_id and current_bot_id and current_bot_id != desired_bot_id:
        logger.error(f"SKIP admin review send: wrong bot id={current_bot_id}, expected id={desired_bot_id}")
        return

    await bot_client.send_message(ADMIN_ID, msg, buttons=buttons)

async def handle_review_callback(event):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–æ–∫"""
    data = event.data.decode()
    if data.startswith("ap:"):
        lead_id = data.split(":", 1)[1]
        lead = pending_leads.get(lead_id)
        if lead:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º
            metrics['leads_sent'] += 1
            logger.info(f"‚úÖ –ê–¥–º–∏–Ω –æ–¥–æ–±—Ä–∏–ª –ª–∏–¥: {data}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–¥–º–∏–Ω—Å–∫–æ–µ —Ä–µ—à–µ–Ω–∏–µ –≤ feedback.db –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –ò–ò
            await _store_admin_decision(lead, "useful", lead_id)
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ª–∏–¥–∞
            try:
                parts = lead['chat_info'].split(" (")
                chat_id = int(parts[0])
                group_name = parts[1][:-1] if len(parts) > 1 else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —á–∞—Ç"
            except:
                chat_id = 0
                group_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —á–∞—Ç"
            # Admin-approved leads should be sent with high confidence
            sender_username = lead.get("sender_username", "")
            sender_id = lead.get("sender_id", 0)
            display_name = f"@{sender_username}" if sender_username else "–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ –∞–¥–º–∏–Ω–æ–º"
            sent_uids, failed_uids = await send_lead_to_users(
                chat_id=chat_id,
                group_name=group_name,
                group_username=None,
                sender_name=display_name,
                sender_id=sender_id,
                sender_username=sender_username,
                text=lead['text'],
                link=lead.get("link", ""),
                region=lead.get("region"),
                regions=lead.get("regions"),
                detected_category=(lead.get("category") or lead.get("detected_category")),
                subcategory=lead.get("subcategory"),
                route=lead.get("route"),
                confidence=lead.get("confidence", 0.9)  # Admin-approved leads should have high confidence
            )
            logger.info(f"REVIEW_SENT | users={len(sent_uids)} failed={len(failed_uids)} | lead={lead_id}")
            await event.answer("‚úÖ –õ–∏–¥ –æ–¥–æ–±—Ä–µ–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º!")
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            try:
                await event.delete()
            except:
                pass
            del pending_leads[lead_id]
        else:
            await event.answer("–û—à–∏–±–∫–∞: –ª–∏–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    elif data.startswith("rj:"):
        lead_id = data.split(":", 1)[1]
        lead = pending_leads.get(lead_id)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–¥–º–∏–Ω—Å–∫–æ–µ —Ä–µ—à–µ–Ω–∏–µ –≤ feedback.db –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –ò–ò
        if lead:
            await _store_admin_decision(lead, "not_useful", lead_id)
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ feedback
        with open(FEEDBACK_FILE, "a", encoding="utf-8") as f:
            f.write(f"{datetime.now()} | {data}\n")
        logger.info(f"‚ùå –ê–¥–º–∏–Ω –æ—Ç–∫–ª–æ–Ω–∏–ª –ª–∏–¥: {data}")
        await event.answer("‚ùå –õ–∏–¥ –æ—Ç–∫–ª–æ–Ω—ë–Ω!")
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            await event.delete()
        except:
            pass
        if lead_id in pending_leads:
            del pending_leads[lead_id]
async def _store_admin_decision(lead, feedback_type, lead_id):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∞–¥–º–∏–Ω—Å–∫–æ–µ —Ä–µ—à–µ–Ω–∏–µ –≤ feedback.db –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –ò–ò"""
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        await feedback_manager.init_db()
        
        # –°–æ–∑–¥–∞—ë–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π message_id –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è
        admin_message_id = f"admin_{lead_id}_{int(datetime.now().timestamp())}"
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ª–∏–¥–∞
        message_text = lead.get('text', '')
        category = lead.get('category') or lead.get('detected_category')
        region = lead.get('region')
        confidence = lead.get('confidence', 0.5)  # –õ–∏–¥—ã –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–±—ã—á–Ω–æ –Ω–∏–∑–∫–æ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        await feedback_manager.store_lead_sent(
            message_id=admin_message_id,
            user_id="admin",  # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π user_id –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö —Ä–µ—à–µ–Ω–∏–π
            message_text=message_text,
            ai_classification={
                "category": category,
                "region": region,
                "confidence": confidence,
                "source": "admin_review"
            },
            category=category,
            region=region,
            confidence=confidence
        )
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º feedback
        success = await feedback_manager.record_feedback(admin_message_id, feedback_type)
        
        if success:
            logger.info(f"üìö –ê–¥–º–∏–Ω—Å–∫–æ–µ —Ä–µ—à–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è: {feedback_type} | {admin_message_id}")
        else:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω—Å–∫–æ–µ —Ä–µ—à–µ–Ω–∏–µ: {admin_message_id}")
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è: {e}")

async def migrate_feedback_log_to_db():
    """–ú–∏–≥—Ä–∏—Ä—É–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∞–¥–º–∏–Ω—Å–∫–∏–µ —Ä–µ—à–µ–Ω–∏—è –∏–∑ feedback.log –≤ feedback.db"""
    try:
        if not os.path.exists(FEEDBACK_FILE):
            logger.info("üìÅ feedback.log –Ω–µ –Ω–∞–π–¥–µ–Ω, –º–∏–≥—Ä–∞—Ü–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è")
            return 0
        
        await feedback_manager.init_db()
        migrated_count = 0
        
        with open(FEEDBACK_FILE, "r", encoding="utf-8") as f:
            for line in f:
                line = line.strip()
                if not line or not line.startswith("20"):  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏ –Ω–µ—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ
                    continue
                
                try:
                    # –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–æ–∫—É: "2025-08-24 19:28:40.320397 | rj:ac0012dd7587a55c"
                    parts = line.split(" | ")
                    if len(parts) != 2:
                        continue
                    
                    timestamp_str = parts[0]
                    decision_data = parts[1]
                    
                    if decision_data.startswith("rj:"):
                        feedback_type = "not_useful"
                        lead_id = decision_data[3:]  # –£–±–∏—Ä–∞–µ–º "rj:"
                    elif decision_data.startswith("ap:"):
                        feedback_type = "useful"
                        lead_id = decision_data[3:]  # –£–±–∏—Ä–∞–µ–º "ap:"
                    else:
                        continue
                    
                    # –°–æ–∑–¥–∞—ë–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π message_id
                    admin_message_id = f"migrated_admin_{lead_id}_{timestamp_str.replace(' ', '_').replace(':', '-')}"
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –º–∏–≥—Ä–∏—Ä–æ–≤–∞–ª–∏ –ª–∏ —É–∂–µ —ç—Ç–æ—Ç –ª–∏–¥
                    existing = await _check_if_migrated(admin_message_id)
                    if existing:
                        continue
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–æ–Ω–Ω—É—é –∑–∞–ø–∏—Å—å
                    await feedback_manager.store_lead_sent(
                        message_id=admin_message_id,
                        user_id="admin",
                        message_text=f"–ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∞–¥–º–∏–Ω—Å–∫–æ–µ —Ä–µ—à–µ–Ω–∏–µ (ID: {lead_id})",
                        ai_classification={
                            "category": "unknown",
                            "region": "unknown", 
                            "confidence": 0.5,
                            "source": "migrated_admin_decision",
                            "original_timestamp": timestamp_str
                        },
                        category="unknown",
                        region="unknown",
                        confidence=0.5
                    )
                    
                    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º feedback
                    await feedback_manager.record_feedback(admin_message_id, feedback_type)
                    migrated_count += 1
                    
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ —Å—Ç—Ä–æ–∫–∏: {line} | {e}")
                    continue
        
        logger.info(f"‚úÖ –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ {migrated_count} –∞–¥–º–∏–Ω—Å–∫–∏—Ö —Ä–µ—à–µ–Ω–∏–π –∏–∑ feedback.log")
        return migrated_count
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ feedback.log: {e}")
        return 0

async def _check_if_migrated(message_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –±—ã–ª –ª–∏ —É–∂–µ –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω –¥–∞–Ω–Ω—ã–π message_id"""
    try:
        import aiosqlite
        async with aiosqlite.connect(feedback_manager.db_path) as db:
            cursor = await db.execute(
                "SELECT id FROM feedback WHERE message_id = ?",
                (message_id,)
            )
            result = await cursor.fetchone()
            return result is not None
    except Exception:
        return False


# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫
@bot_client.on(events.CallbackQuery(pattern=b'^(ap|rj):'))
async def _on_review_callback(event):
    await handle_review_callback(event)
