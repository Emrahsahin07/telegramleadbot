# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞–ø—Ä—è–º—É—é –∏–∑ config.py
from config import bot_client, subscriptions, ADMIN_ID, save_subscriptions, categories, LOCATION_ALIAS, logger
from feedback_manager import feedback_manager

# Canonical locations
CANONICAL_LOCATIONS = sorted(set(LOCATION_ALIAS.values()))

def has_subcats(cat: str) -> bool:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ —É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –µ—Å—Ç—å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ categories.json"""
    return bool(categories.get(cat, {}).get('subcategories'))

from datetime import datetime, timedelta, timezone
from telethon import events, Button
ISTANBUL_TZ = timezone(timedelta(hours=3))
from telethon.errors.rpcerrorlist import MessageNotModifiedError

import time

_last_start_ts = {}

# Constants
ITEMS_PER_PAGE = 8
TRIAL_DAYS = 2
START_COOLDOWN = 10

# UI Text Constants
UI_TEXTS = {
    'welcome': 'üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!',
    'settings': '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏',
    'subscription': 'üíé Pro',
    'help': '‚ùì –ü–æ–º–æ—â—å',
    'test': 'üìù –¢–µ—Å—Ç',
    'reset': 'üîÑ –°–±—Ä–æ—Å',
    'back': '‚óÄÔ∏è –ù–∞–∑–∞–¥',
    'close': '‚ùå –ó–∞–∫—Ä—ã—Ç—å',
    'categories': 'üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏',
    'locations': 'üìç –õ–æ–∫–∞—Ü–∏–∏'
}

# Helper: Build a toggle menu (checkbox list with Back/Close), with pagination
def build_toggle_menu(title: str, items: list, selected: list,
                     prefix: str, back_key: bytes,
                     page: int = 0):
    """
    Build a toggle menu: each item with a checkbox, plus Back and Close buttons, paginated.
    """
    total_pages = (len(items) - 1) // ITEMS_PER_PAGE + 1
    start = page * ITEMS_PER_PAGE
    end = start + ITEMS_PER_PAGE
    page_items = items[start:end]
    buttons = []
    for it in page_items:
        mark = '‚úÖ ' if it in selected else ''
        buttons.append([Button.inline(f"{mark}{it}", f"{prefix}:{it}")])
    # Pagination navigation
    nav_row = []
    if page > 0:
        nav_row.append(Button.inline('‚¨ÖÔ∏è', f'{prefix}_page:{page-1}'))
    if page < total_pages - 1:
        nav_row.append(Button.inline('‚û°Ô∏è', f'{prefix}_page:{page+1}'))
    if nav_row:
        buttons.append(nav_row)
    buttons.append([Button.inline('‚óÄÔ∏è –ù–∞–∑–∞–¥', back_key)])
    return title, buttons

# Helper: Safe edit wrapper to ignore MessageNotModifiedError
async def safe_edit(event, *args, **kwargs):
    """Wrapper for event.edit to ignore MessageNotModifiedError when content is unchanged."""
    try:
        await event.edit(*args, **kwargs)
    except MessageNotModifiedError:
        pass

@bot_client.on(events.NewMessage(pattern='/start'))
async def cmd_start(event):
    uid = str(event.sender_id)
    now = time.time()
    if now - _last_start_ts.get(uid, 0) < START_COOLDOWN:
        return  # –∏–≥–Ω–æ—Ä –ø–æ–≤—Ç–æ—Ä–æ–≤
    _last_start_ts[uid] = now
    # Use subcats in prefs defaults
    prefs = subscriptions.get(uid, {'categories': [], 'locations': [], 'subcats': {}})
    cats = prefs.get('categories', [])
    locs = prefs.get('locations', [])
    # Compact status display
    filters_status = f"üìä {len(cats)}–∫‚Ä¢{len(locs)}–ª" if cats or locs else "üìä –ù–∞—Å—Ç—Ä–æ–∏—Ç—å"
    # Compact subscription status
    trial = prefs.get('trial_start')
    sub_end = prefs.get('subscription_end')
    if sub_end:
        end = datetime.fromisoformat(sub_end).astimezone(ISTANBUL_TZ)
        subscription_status = f"üõ° –¥–æ {end.strftime('%d.%m')}"
        subscription_button = "üíé Pro –∞–∫—Ç–∏–≤–µ–Ω"
    elif trial:
        start = datetime.fromisoformat(trial)
        end_dt = start + timedelta(days=TRIAL_DAYS)
        end = end_dt.astimezone(ISTANBUL_TZ)
        subscription_status = f"üéÅ –¥–æ {end.strftime('%d.%m %H:%M')}"
        subscription_button = "üíé Pro"
    else:
        subscription_status = "üíé –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å Pro"
        subscription_button = "üíé Pro"
    
    full_header = f"{UI_TEXTS['welcome']}\n{filters_status} | {subscription_status}"
    await event.reply(
        full_header,
        buttons=[
            [Button.inline(f"{UI_TEXTS['settings']} {filters_status}", b'menu:settings'),
             Button.inline(subscription_button, b'menu:subscribe')],
            [Button.inline(UI_TEXTS['test'], b'menu:sample'),
             Button.inline(UI_TEXTS['help'], b'menu:faq')],
            [Button.inline(UI_TEXTS['close'], b'menu:close')]
        ]
    )

@bot_client.on(events.CallbackQuery)
async def callback(event):
    try:
        data = event.data.decode()
        uid = str(event.sender_id)
        
        # Skip if this is an admin review callback (handled by review_handler)
        if data.startswith(('ap:', 'rj:')):
            return
            
        # Handle feedback callbacks
        if data.startswith('feedback:'):
            # Format: feedback:message_id:useful/not_useful
            try:
                _, message_id, feedback_type = data.split(':', 2)
                success = await feedback_manager.record_feedback(message_id, feedback_type)
                
                if success:
                    if feedback_type == 'useful':
                        await event.answer('‚úÖ –°–ø–∞—Å–∏–±–æ! –û—Ç–º–µ—Ç–∏–ª–∏ –∫–∞–∫ –ø–æ–ª–µ–∑–Ω—ã–π –ª–∏–¥', alert=True)
                    else:
                        await event.answer('‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å!', alert=True)
                    
                    # Remove feedback buttons after user responds
                    try:
                        await event.edit(event.message.text, buttons=None)
                    except Exception:
                        pass  # If edit fails, just continue
                        
                else:
                    await event.answer('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞', alert=True)
                    
            except Exception as e:
                logger.error(f"Error handling feedback: {e}")
                await event.answer('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–∑—ã–≤–∞', alert=True)
            return
            
        # Initialize or retrieve user preferences, ensuring keys exist
        prefs = subscriptions.setdefault(uid, {'categories': [], 'locations': [], 'subcats': {}})
        # Ensure 'subcats' key exists even for —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏
        prefs.setdefault('subcats', {})
        
        # Helper function for compact status
        def get_compact_status():
            cats = prefs.get('categories', [])
            locs = prefs.get('locations', [])
            filters_status = f"üìä {len(cats)}–∫‚Ä¢{len(locs)}–ª" if cats or locs else "üìä –ù–∞—Å—Ç—Ä–æ–∏—Ç—å"
            
            trial = prefs.get('trial_start')
            sub_end = prefs.get('subscription_end')
            if sub_end:
                end = datetime.fromisoformat(sub_end).astimezone(ISTANBUL_TZ)
                subscription_status = f"üõ° –¥–æ {end.strftime('%d.%m')}"
            elif trial:
                start = datetime.fromisoformat(trial)
                end_dt = start + timedelta(days=TRIAL_DAYS)
                end = end_dt.astimezone(ISTANBUL_TZ)
                subscription_status = f"üéÅ –¥–æ {end.strftime('%d.%m %H:%M')}"
            else:
                subscription_status = "üíé –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å Pro"
            
            return filters_status, subscription_status

        # Pagination for categories
        if data.startswith('cat_page:'):
            page = int(data.split(':',1)[1])
            title, buttons = build_toggle_menu(
                '–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ (‚úÖ = –≤—ã–±—Ä–∞–Ω–æ)',
                list(categories.keys()),
                prefs['categories'],
                'cat',
                b'menu:settings',
                page=page
            )
            await safe_edit(event, title, buttons=buttons)
            return

        # Pagination for locations
        elif data.startswith('loc_page:'):
            page = int(data.split(':',1)[1])
            title, buttons = build_toggle_menu(
                '–õ–æ–∫–∞—Ü–∏–∏ (‚úÖ = –≤—ã–±—Ä–∞–Ω–æ)',
                CANONICAL_LOCATIONS,
                prefs['locations'],
                'loc',
                b'menu:settings',
                page=page
            )
            await safe_edit(event, title, buttons=buttons)
            return

        # Toggle individual subcategory (format subcat:<cat>:<sub>)
        elif data.startswith('subcat:') and '_page:' not in data and data.count(':') == 2:
            _, cat, sub = data.split(':', 2)
            selected = prefs['subcats'].setdefault(cat, [])
            if sub in selected:
                selected.remove(sub)
            else:
                selected.append(sub)

            # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é: –¥–æ–±–∞–≤–ª—è–µ–º, –µ—Å–ª–∏ –µ—Å—Ç—å —Ö–æ—Ç—å –æ–¥–Ω–∞ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è
            if selected and cat not in prefs['categories']:
                prefs['categories'].append(cat)
            # –ï—Å–ª–∏ –≤—Å–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–Ω—è—Ç—ã ‚Äî —É–±–∏—Ä–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞
            if not selected and cat in prefs['categories']:
                prefs['categories'].remove(cat)

            subscriptions[uid] = prefs
            save_subscriptions()
            # Refresh subcategory menu (stay on page 0)
            subcats = list(categories[cat]['subcategories'].keys())
            title, buttons = build_toggle_menu(
                f'–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ¬´{cat}¬ª (‚úÖ = –≤—ã–±—Ä–∞–Ω–æ)',
                subcats,
                selected,
                f'subcat:{cat}',
                b'menu:settings',
                page=0
            )
            await safe_edit(event, title, buttons=buttons)
            return
        # Main menu callback
        elif data == 'menu:main':
            filters_status, subscription_status = get_compact_status()
            
            # Determine subscription button text
            sub_end = prefs.get('subscription_end')
            subscription_button = "üíé Pro –∞–∫—Ç–∏–≤–µ–Ω" if sub_end else "üíé Pro"
            
            full_header = f"{UI_TEXTS['welcome']}\n{filters_status} | {subscription_status}"
            await safe_edit(
                event,
                full_header,
                buttons=[
                    [Button.inline(f"{UI_TEXTS['settings']} {filters_status}", b'menu:settings'),
                     Button.inline(subscription_button, b'menu:subscribe')],
                    [Button.inline(UI_TEXTS['test'], b'menu:sample'),
                     Button.inline(UI_TEXTS['help'], b'menu:faq')],
                    [Button.inline(UI_TEXTS['close'], b'menu:close')]
                ]
            )

        # Settings submenu
        elif data == 'menu:settings':
            # Show filter counts in buttons
            cat_count = len([c for c in categories.keys() if c in prefs['categories'] or prefs['subcats'].get(c)])
            loc_count = len(prefs['locations'])
            
            await safe_edit(
                event,
                '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤:',
                buttons=[
                    [Button.inline(f"{UI_TEXTS['categories']} ({cat_count})", b'menu:categories'),
                     Button.inline(f"{UI_TEXTS['locations']} ({loc_count})", b'menu:locations')],
                    [Button.inline('–ú–æ–∏ —Ñ–∏–ª—å—Ç—Ä—ã', b'menu:my_filters'),
                     Button.inline(UI_TEXTS['reset'], b'menu:reset_confirm')],
                    [Button.inline(UI_TEXTS['back'], b'menu:main'),
                     Button.inline(UI_TEXTS['close'], b'menu:close')]
                ]
            )
            # Start trial for new users
            if 'trial_start' not in prefs:
                prefs['trial_start'] = datetime.now(timezone.utc).isoformat()
                subscriptions[uid] = prefs
                save_subscriptions()
                await event.answer(f'üéÅ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω {TRIAL_DAYS}-–¥–Ω–µ–≤–Ω—ã–π –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥!', alert=True)

        # Categories submenu
        elif data == 'menu:categories':
            selected_cats = [
                cat for cat in categories.keys()
                if cat in prefs['categories'] or prefs['subcats'].get(cat)
            ]
            title, buttons = build_toggle_menu(
                '–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ (‚úÖ = –≤—ã–±—Ä–∞–Ω–æ)',
                list(categories.keys()),
                selected_cats,
                'cat',
                b'menu:settings',
                page=0
            )
            await safe_edit(event, title, buttons=buttons)

        # Toggle category (with subcat opening)
        elif data.startswith('cat:'):
            cat = data.split(':', 1)[1]
            # –ï—Å–ª–∏ —É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –µ—Å—Ç—å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –æ—Ç–∫—Ä—ã–≤–∞–µ–º –∏—Ö –º–µ–Ω—é
            if has_subcats(cat):
                subcats = list(categories[cat]['subcategories'].keys())
                selected = prefs['subcats'].get(cat, [])
                title, buttons = build_toggle_menu(
                    f'–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ¬´{cat}¬ª (‚úÖ = –≤—ã–±—Ä–∞–Ω–æ)',
                    subcats,
                    selected,
                    f'subcat:{cat}',
                    b'menu:settings',
                    page=0
                )
                await safe_edit(event, title, buttons=buttons)
                return
            # –û–±—ã—á–Ω—ã–π toggle –¥–ª—è –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
            if cat in prefs['categories']:
                prefs['categories'].remove(cat)
            else:
                prefs['categories'].append(cat)
            subscriptions[uid] = prefs
            save_subscriptions()
            # Refresh categories submenu (stay on page 0)
            selected_cats = [
                c for c in categories.keys()
                if c in prefs['categories'] or prefs['subcats'].get(c)
            ]
            title, buttons = build_toggle_menu(
                '–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ (‚úÖ = –≤—ã–±—Ä–∞–Ω–æ)',
                list(categories.keys()),
                selected_cats,
                'cat',
                b'menu:settings',
                page=0
            )
            await safe_edit(event, title, buttons=buttons)
            return

        # Locations submenu
        elif data == 'menu:locations':
            title, buttons = build_toggle_menu(
                '–õ–æ–∫–∞—Ü–∏–∏ (‚úÖ = –≤—ã–±—Ä–∞–Ω–æ)',
                CANONICAL_LOCATIONS,
                prefs['locations'],
                'loc',
                b'menu:settings',
                page=0
            )
            await safe_edit(event, title, buttons=buttons)

        # Toggle location
        elif data.startswith('loc:'):
            loc = data.split(':', 1)[1]
            # loc is now canonical display name
            if loc in prefs['locations']:
                prefs['locations'].remove(loc)
            else:
                prefs['locations'].append(loc)
            subscriptions[uid] = prefs
            save_subscriptions()
            # Refresh locations submenu, default to page 0
            title, buttons = build_toggle_menu(
                '–õ–æ–∫–∞—Ü–∏–∏ (‚úÖ = –≤—ã–±—Ä–∞–Ω–æ)',
                CANONICAL_LOCATIONS,
                prefs['locations'],
                'loc',
                b'menu:settings',
                page=0
            )
            await safe_edit(event, title, buttons=buttons)
            return

        # Close menu
        elif data == 'menu:close':
            await event.delete()

        # Show current filters
        elif data == 'menu:my_filters':
            cats = prefs.get('categories', [])
            locs = prefs.get('locations', [])
            subcats = prefs.get('subcats', {})
            
            # Build detailed filter display
            filter_lines = []
            if cats:
                filter_lines.append(f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ ({len(cats)}): {', '.join(cats)}")
            if subcats:
                for cat, subs in subcats.items():
                    if subs:
                        filter_lines.append(f"   ‚îî {cat}: {', '.join(subs)}")
            if locs:
                filter_lines.append(f"üìç –õ–æ–∫–∞—Ü–∏–∏ ({len(locs)}): {', '.join(locs)}")
            
            if not filter_lines:
                text = "üìã –§–∏–ª—å—Ç—Ä—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã\n\n–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –ª–æ–∫–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –ª–∏–¥–æ–≤."
            else:
                text = "üìã –ê–∫—Ç–∏–≤–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã:\n\n" + "\n".join(filter_lines)
            
            await safe_edit(
                event, 
                text, 
                buttons=[
                    [Button.inline(UI_TEXTS['back'], b'menu:settings')]
                ]
            )

        # Reset confirmation
        elif data == 'menu:reset_confirm':
            cats_count = len(prefs.get('categories', []))
            locs_count = len(prefs.get('locations', []))
            subcats_count = sum(len(subs) for subs in prefs.get('subcats', {}).values())
            total_filters = cats_count + locs_count + subcats_count
            
            if total_filters == 0:
                await event.answer('‚ùå –ù–µ—Ç —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–ª—è —Å–±—Ä–æ—Å–∞', alert=True)
                return
                
            await safe_edit(
                event,
                f'üîÑ –°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã?\n({total_filters} –∞–∫—Ç–∏–≤–Ω—ã—Ö)',
                buttons=[
                    [Button.inline('‚úÖ –î–∞, —Å–±—Ä–æ—Å–∏—Ç—å', b'menu:reset_do'),
                     Button.inline('‚ùå –û—Ç–º–µ–Ω–∞', b'menu:main')]
                ]
            )

        # Execute reset
        elif data == 'menu:reset_do':
            # Clear user's filters
            prefs['categories'] = []
            prefs['locations'] = []
            prefs['subcats'] = {}
            subscriptions[uid] = prefs
            save_subscriptions()
            
            await event.answer('üîÑ –í—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã —Å–±—Ä–æ—à–µ–Ω—ã', alert=True)
            
            # Return to main menu
            filters_status, subscription_status = get_compact_status()
            sub_end = prefs.get('subscription_end')
            subscription_button = "üíé Pro –∞–∫—Ç–∏–≤–µ–Ω" if sub_end else "üíé Pro"
            
            full_header = f"{UI_TEXTS['welcome']}\n{filters_status} | {subscription_status}"
            await safe_edit(
                event,
                full_header,
                buttons=[
                    [Button.inline(f"{UI_TEXTS['settings']} {filters_status}", b'menu:settings'),
                     Button.inline(subscription_button, b'menu:subscribe')],
                    [Button.inline(UI_TEXTS['test'], b'menu:sample'),
                     Button.inline(UI_TEXTS['help'], b'menu:faq')],
                    [Button.inline(UI_TEXTS['close'], b'menu:close')]
                ]
            )

        # Show plan info
        elif data == 'menu:plan':
            ts = prefs.get('trial_start')
            if ts:
                start = datetime.fromisoformat(ts)
                end_dt = start + timedelta(days=2)
                end_local = end_dt.astimezone(ISTANBUL_TZ)
                end_str = end_local.strftime('%Y-%m-%d %H:%M (UTC+3)')
                trial_text = f"–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –¥–æ: {end_str}"
            else:
                trial_text = "–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω"
            text = (
                "üè∑ –í–∞—à —Ç–∞—Ä–∏—Ñ: Free\n"
                f"{trial_text}\n\n"
                "–ß—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ Pro, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–ü–æ–¥–ø–∏—Å–∫–∞¬ª"
            )
            await safe_edit(
                event,
                text,
                buttons=[[Button.inline('üí≥ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è', b'menu:subscribe')], [Button.inline('‚óÄÔ∏è –ù–∞–∑–∞–¥', b'menu:settings')]]
            )

        # Send a sample lead with close button
        elif data == 'menu:sample':
            example = (
                "üìù –ü—Ä–∏–º–µ—Ä –ª–∏–¥–∞:\n\n"
                "üó® –¢—É—Ä—ã–ê–Ω—Ç–∞–ª–∏—è | @ivan_tourist\n"
                "‚Äî –ò—â—É –≥–∏–¥–∞ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –≤ –ö–µ–º–µ—Ä, –≥—Ä—É–ø–ø–∞ 4 —á–µ–ª–æ–≤–µ–∫–∞. "
                "–ë—é–¥–∂–µ—Ç –¥–æ 100$. –ö—Ç–æ –º–æ–∂–µ—Ç –ø–æ–º–æ—á—å?\n\n"
                "#–∫–µ–º–µ—Ä #—ç–∫—Å–∫—É—Ä—Å–∏–∏ #–≥–∏–¥"
            )
            await safe_edit(
                event,
                example,
                buttons=[[Button.inline(UI_TEXTS['back'], b'menu:main')]]
            )

        # FAQ / Help with structured info
        elif data == 'menu:faq':
            faq_text = (
                "‚ùì –°–ø—Ä–∞–≤–∫–∞\n\n"
                "üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞: ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Üí –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –ª–æ–∫–∞—Ü–∏–∏\n\n"
                "‚è∞ –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥: 2 –¥–Ω—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ\n\n"
                "üíé Pro –ø–æ–¥–ø–∏—Å–∫–∞:\n"
                "‚Ä¢ 1 –º–µ—Å ‚Äî 20 USD\n"
                "‚Ä¢ 3 –º–µ—Å ‚Äî 54 USD\n"
                "‚Ä¢ 6 –º–µ—Å ‚Äî 96 USD\n\n"
                "üí≥ –û–ø–ª–∞—Ç–∞: —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É 'üíé Pro' ‚Üí '‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª'\n\n"
                "üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞: @support_bot"
            )
            await safe_edit(
                event,
                faq_text,
                buttons=[[Button.inline(UI_TEXTS['back'], b'menu:main')]]
            )

        # Show subscription prices and manual payment details merged
        elif data == 'menu:subscribe':
            # Check current status
            sub_end = prefs.get('subscription_end')
            if sub_end:
                end = datetime.fromisoformat(sub_end).astimezone(ISTANBUL_TZ)
                text = (
                    f"üíé Pro –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ {end.strftime('%d.%m.%Y %H:%M')}\n\n"
                    "üîÑ –ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É:\n"
                    "‚Ä¢ 1 –º–µ—Å ‚Äî 20 USD\n"
                    "‚Ä¢ 3 –º–µ—Å ‚Äî 54 USD\n"
                    "‚Ä¢ 6 –º–µ—Å ‚Äî 96 USD"
                )
            else:
                text = (
                    "üíé Pro –ø–æ–¥–ø–∏—Å–∫–∞\n\n"
                    "üì¶ –¢–∞—Ä–∏—Ñ—ã:\n"
                    "‚Ä¢ 1 –º–µ—Å ‚Äî 20 USD\n"
                    "‚Ä¢ 3 –º–µ—Å ‚Äî 54 USD (-10%)\n"
                    "‚Ä¢ 6 –º–µ—Å ‚Äî 96 USD (-20%)\n\n"
                    "üí≥ –û–ø–ª–∞—Ç–∞: –∫–∞—Ä—Ç–∞, Bitcoin, Ethereum"
                )
            
            await safe_edit(
                event,
                text,
                buttons=[
                    [Button.inline('üí≥ –†–µ–∫–≤–∏–∑–∏—Ç—ã', b'menu:payment_details')],
                    [Button.inline('‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª', b'menu:paid')],
                    [Button.inline(UI_TEXTS['back'], b'menu:main')]
                ]
            )

        # Payment details
        elif data == 'menu:payment_details':
            text = (
                "üí≥ –†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã:\n\n"
                "üíµ –ö–∞—Ä—Ç–∞:\n1234 5678 9012 3456\n(–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤)\n\n"
                "‚Çø Bitcoin:\n1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\n\n"
                "Œû Ethereum:\n0xAbC1234Ef567890BcDEF1234567890AbCdEF1234\n\n"
                "üì∏ –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ '‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª' –∏ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç."
            )
            await safe_edit(
                event,
                text,
                buttons=[
                    [Button.inline('‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª', b'menu:paid')],
                    [Button.inline(UI_TEXTS['back'], b'menu:subscribe')]
                ]
            )

        elif data == 'menu:paid':
            # Notify admin that user pressed ‚Äú–Ø –æ–ø–ª–∞—Ç–∏–ª‚Äù with their filters
            prefs = subscriptions.get(uid, {})
            cats = prefs.get('categories', [])
            locs = prefs.get('locations', [])
            # Try to get username, otherwise show ID
            try:
                user_entity = await bot_client.get_entity(int(uid))
                uname = user_entity.username or user_entity.first_name or uid
            except:
                uname = uid
            info = (
                f"üì¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{uname} (ID={uid}) –Ω–∞–∂–∞–ª ¬´–Ø –æ–ø–ª–∞—Ç–∏–ª¬ª –∏ –≥–æ—Ç–æ–≤ –∫ –ø—Ä–æ–≤–µ—Ä–∫–µ.\n"
                f"–ö–∞—Ç–µ–≥–æ—Ä–∏–∏: {', '.join(cats) if cats else '‚Äî'}\n"
                f"–õ–æ–∫–∞—Ü–∏–∏: {', '.join(locs) if locs else '‚Äî'}"
            )
            # Send info to admin
            await bot_client.send_message(ADMIN_ID, info)
            # Prompt user to attach screenshot
            await event.answer("‚úÖ –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Å–∫—Ä–∏–Ω –æ–ø–ª–∞—Ç—ã.", alert=True)
            # Mark that we're awaiting payment screenshot from this user
            prefs = subscriptions.get(uid, {})
            prefs['awaiting_screenshot'] = True
            subscriptions[uid] = prefs
            save_subscriptions()

        # Admin approval callbacks
        elif data.startswith('approve:'):
            # Only admin can approve
            if event.sender_id != ADMIN_ID:
                await event.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ", alert=True)
                return
            _, uid_str, months_str = data.split(':')
            months = int(months_str)
            uid = uid_str
            end = datetime.now(timezone.utc) + timedelta(days=30 * months)
            end_local = end.astimezone(ISTANBUL_TZ)
            prefs = subscriptions.setdefault(uid, {})
            prefs['subscription_end'] = end.isoformat()
            # Clear trial flags
            prefs.pop('trial_start', None)
            prefs.pop('trial_expired_notified', None)
            prefs.pop('paid_expired_notified', None)
            prefs.pop('awaiting_screenshot', None)
            # Save updated subscriptions
            save_subscriptions()
            # Notify admin and user with local time
            end_str = end_local.strftime('%d.%m.%Y %H:%M')
            await safe_edit(event, f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {uid} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –¥–æ {end_str}")
            await bot_client.send_message(
                int(uid),
                f"üéâ –í–∞—à–∞ üíé Pro –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –¥–æ {end_str}!"
            )

        elif data.startswith('reject:'):
            # Only admin can reject
            if event.sender_id != ADMIN_ID:
                await event.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ", alert=True)
                return
            _, uid_str = data.split(':')
            uid = uid_str
            # Clear awaiting screenshot flag
            prefs = subscriptions.get(uid, {})
            prefs.pop('awaiting_screenshot', None)
            subscriptions[uid] = prefs
            save_subscriptions()
            
            await safe_edit(event, f"‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {uid} –æ—Ç–º–µ–Ω–µ–Ω–∞")
            await bot_client.send_message(
                int(uid),
                "‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –æ–ø–ª–∞—Ç–∞ –Ω–µ –±—ã–ª–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π."
            )

        else:
            # Unknown callback - acknowledge to prevent timeout
            await event.answer("‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞", alert=False)
            
    except MessageNotModifiedError:
        # Ignore if content is the same
        pass
    except Exception as e:
        # Log error and notify user
        logger.error(f"Callback error for {uid}: {e}")
        try:
            await event.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.", alert=True)
        except Exception:
            pass  # If we can't even send error message, just pass
    
@bot_client.on(events.NewMessage(func=lambda e: e.is_private and (e.photo or e.document)))
async def handle_payment_screenshot(event):
    """Handle payment screenshot uploads"""
    try:
        user_id = str(event.sender_id)
        prefs = subscriptions.get(user_id, {})
        
        # Only handle screenshot if user has pressed "–Ø –æ–ø–ª–∞—Ç–∏–ª"
        if not prefs.get('awaiting_screenshot'):
            return
        
        # Clear the flag so future photos won't trigger
        prefs.pop('awaiting_screenshot', None)
        subscriptions[user_id] = prefs
        save_subscriptions()
        
        # Get user info for admin
        try:
            user_entity = await bot_client.get_entity(int(user_id))
            uname = user_entity.username or user_entity.first_name or user_id
        except Exception:
            uname = user_id
        
        # Notify admin via Telethon
        await bot_client.send_message(
            ADMIN_ID,
            f"üì∏ –ü–æ–ª—É—á–µ–Ω —Å–∫—Ä–∏–Ω –æ–ø–ª–∞—Ç—ã –æ—Ç @{uname} (ID: {user_id})"
        )
        
        # Forward media via Telethon
        await bot_client.forward_messages(
            ADMIN_ID,
            event.id,
            event.chat_id
        )
        
        # Present admin with subscription approval options
        await bot_client.send_message(
            ADMIN_ID,
            f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}:",
            buttons=[
                [Button.inline("1 –º–µ—Å.", f"approve:{user_id}:1"),
                 Button.inline("3 –º–µ—Å.", f"approve:{user_id}:3")],
                [Button.inline("6 –º–µ—Å.", f"approve:{user_id}:6")],
                [Button.inline("‚ùå –û—Ç–∫–∞–∑–∞—Ç—å", f"reject:{user_id}")]
            ]
        )
        
        # Acknowledge user
        await event.reply("‚úÖ –°–ø–∞—Å–∏–±–æ! –ü–æ–ª—É—á–∏–ª–∏ –≤–∞—à —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã. –ö–∞–∫ —Ç–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–∏–º ‚Äî –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É.")
        
    except Exception as e:
        logger.error(f"Payment screenshot handling error: {e}")
        try:
            await event.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")
        except Exception:
            pass